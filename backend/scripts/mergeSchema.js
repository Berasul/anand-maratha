const fs = require('fs');
const path = require('path');

const modelsDir = path.join(__dirname, '../prisma/models');
const outputSchema = path.join(__dirname, '../prisma/schema.prisma');

// Prisma schema header (datasource and generator)
const header = `// Auto-generated by mergeSchema.js
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

`;

function cleanModelName(content) {
    return content
        .replace(/model\s+(\w+)Model/g, (_, modelName) => `model ${modelName}`)
        .replace(/(\s+)(\w+)Model(?=[\[\s])/g, (_, space, modelName) => `${space}${modelName}`);
}


function mergeSchemas() {
    const files = fs.readdirSync(modelsDir).filter(file => file.endsWith('.prisma'));

    let mergedModels = '';

    for (const file of files) {
        const content = fs.readFileSync(path.join(modelsDir, file), 'utf-8');
        const cleaned = cleanModelName(content.trim());
        mergedModels += '\n\n' + cleaned;
    }

    const finalSchema = header + mergedModels;
    fs.writeFileSync(outputSchema, finalSchema);
    console.log(`âœ… schema.prisma successfully generated with ${files.length} models.`);
}

mergeSchemas();
